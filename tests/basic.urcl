bits 8

minstack 2
minheap 2

@define case_result %numb
@define test_cases %int
@define test_end %text
@define test_end_data '\n'
imm r1 1

// NOTE: `sub` is tested in `core.urcl`
// NOTE: `nop` and `hlt` are not tested (obviously)

// jmp
    jmp .jmp_ok1
    out case_result 1
    .jmp_ok1
    out case_result 0

    imm r1 .jmp_ok2
    jmp r1
    out case_result 2
    .jmp_ok2
    out case_result 0
out test_cases 2
out test_end test_end_data

// mov
    mov r2 3
    mov r1 r2
    sub r1 r1 3
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// lsh
    lsh r1 0x88
    sub r1 r1 0x10
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// inc
    inc r1 255
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// dec
    dec r1 0
    sub r1 r1 255
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// neg
    neg r1 0x69
    sub r1 r1 0x97
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// and
    and r1 5 3
    sub r1 r1 1
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// or
    or r1 5 3
    sub r1 r1 7
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// not
    not r1 0
    sub r1 r1 255
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// xnor
    xnor r1 5 3
    sub r1 r1 249
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// xor
    xor r1 5 3
    sub r1 r1 6
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// nand
    nand r1 5 3
    sub r1 r1 254
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// brl
    brl .brl_ok_1 3 5
    out case_result 1

    .brl_ok_1
    out case_result 0
    brl .brl_fail_2 5 3
    out case_result 0
    bge .brl_ok_2 r0 r0
    .brl_fail_2
    out case_result 2

    .brl_ok_2
    brl .brl_fail_3 3 3
    out case_result 0
    bge .brl_ok_3 r0 r0
    .brl_fail_3
    out case_result 3
    .brl_ok_3
out test_cases 3
out test_end test_end_data
imm r1 1

// brg
    brg .brg_ok_1 5 3
    out case_result 1

    .brg_ok_1
    out case_result 0
    brg .brg_fail_2 3 5
    out case_result 0
    bge .brg_ok_2 r0 r0
    .brg_fail_2
    out case_result 2

    .brg_ok_2
    brg .brg_fail_3 3 3
    out case_result 0
    bge .brg_ok_3 r0 r0
    .brg_fail_3
    out case_result 3
    .brg_ok_3
out test_cases 3
out test_end test_end_data
imm r1 1

// bre
    bre .bre_ok_1 69 325
    out case_result 1

    .bre_ok_1
    out case_result 0
    bre .bre_fail_2 69 42
    out case_result 0
    bge .bre_ok_2 r0 r0

    .bre_fail_2
    out case_result 2
    .bre_ok_2
out test_cases 2
out test_end test_end_data
imm r1 1

// bne
    bne .bne_ok_1 69 42
    out case_result 1

    .bne_ok_1
    out case_result 0
    bne .bne_fail_2 69 325
    out case_result 0
    bge .bne_ok_2 r0 r0

    .bne_fail_2
    out case_result 2
    .bne_ok_2
out test_cases 2
out test_end test_end_data
imm r1 1

// bod
    bod .bod_ok_1 9
    out case_result 1
    .bod_ok_1
    out case_result 0

    bod .bod_fail_2 6
    out case_result 0
    bge .bod_ok_2 r0 r0
    .bod_fail_2
    out case_result 2
    .bod_ok_2
out test_cases 2
out test_end test_end_data
imm r1 1

// bev
    bev .bev_ok_1 6
    out case_result 1
    .bev_ok_1
    out case_result 0

    bev .bev_fail_2 9
    out case_result 0
    bge .bev_ok_2 r0 r0
    .bev_fail_2
    out case_result 2
    .bev_ok_2
out test_cases 2
out test_end test_end_data
imm r1 1

// ble
    ble .ble_ok_1 3 5
    out case_result 1

    .ble_ok_1
    out case_result 0
    ble .ble_fail_2 5 3
    out case_result 0
    bge .ble_ok_2 r0 r0
    .ble_fail_2
    out case_result 2

    .ble_ok_2
    ble .ble_ok_3 3 3
    out case_result 3
    .ble_ok_3
    out case_result 0
out test_cases 3
out test_end test_end_data
imm r1 1

// brz
    brz .brz_ok_1 256
    out case_result 1

    .brz_ok_1
    out case_result 0
    brz .brz_fail_2 69
    out case_result 0
    bge .brz_ok_2 r0 r0

    .brz_fail_2
    out case_result 2
    .brz_ok_2
out test_cases 2
out test_end test_end_data
imm r1 1

// bnz
    bnz .bnz_ok_1 69
    out case_result 1

    .bnz_ok_1
    out case_result 0
    bnz .bnz_fail_2 256
    out case_result 0
    bge .bnz_ok_2 r0 r0

    .bnz_fail_2
    out case_result 2
    .bnz_ok_2
out test_cases 2
out test_end test_end_data
imm r1 1

// Brn [a a],
// Brp [a a],

// psh & pop
    psh 69
    psh 42

    sub r1 sp 2
    out case_result r1

    lod r1 2
    sub r1 r1 42
    out case_result r1
    imm r1 1

    pop r1
    sub r1 r1 42
    out case_result r1

    pop r1
    sub r1 r1 69
    out case_result r1
out test_cases 4
out test_end test_end_data
imm r1 1

// cal and ret
    cal .cal_test
    .cal_after
    jmp .cal_ok
    .cal_test
        pop r1
        sub r2 r1 .cal_after
        out %numb r2
        psh r1

        ret

        // unreachable normally
        out %numb 1
    .cal_ok
out test_cases 1
out test_end test_end_data
imm r1 1

// cpy
    str m0 69
    cpy m1 m0
    lod r1 m1
    sub r1 r1 69
    out %numb r1
    lod r1 m0
    sub r1 r1 69
    out %numb r1
out test_cases 2
out test_end test_end_data
imm r1 1

// Brc [a a a],
// Bnc [a a a],
