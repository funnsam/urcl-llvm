bits 8

@define case_result %numb
@define test_cases %int
@define test_end %text
@define test_end_data '\n'

// NOTE: `sub` is tested in `core.urcl`
// NOTE: `nop` and `hlt` are not tested (obviously)

// jmp
    jmp .jmp_ok1
    out case_result 1
    .jmp_ok1
    out case_result 0

    imm r1 .jmp_ok2
    jmp r1
    out case_result 2
    .jmp_ok2
    out case_result 0
out test_cases 2
out test_end test_end_data

// mov
    mov r2 3
    mov r1 r2
    sub r1 r1 3
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// lsh
    lsh r1 0x88
    sub r1 r1 0x10
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// inc
    inc r1 255
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// dec
    dec r1 0
    sub r1 r1 255
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// neg
    neg r1 0x69
    sub r1 r1 0x97
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// and
    and r1 5 3
    sub r1 r1 1
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// or
    or r1 5 3
    sub r1 r1 7
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// not
    not r1 0
    sub r1 r1 255
    out case_result r1
out test_cases 1
out test_end test_end_data
imm r1 1

// Xnor [r a a],
// Xor [r a a],
// Nand [r a a],

// Brl [a a a],
// Brg [a a a],
// Bre [a a a],
// Bne [a a a],
// Bod [a a],
// Bev [a a],
// Ble [a a a],
// Brz [a a],
// Bnz [a a],
// Brn [a a],
// Brp [a a],

// Psh [a],
// Pop [r],

// Cal [a],
// Ret [],

// Cpy [a a],
// Brc [a a a],
// Bnc [a a a],
